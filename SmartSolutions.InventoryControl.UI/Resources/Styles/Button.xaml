<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:SmartSolutions.InventoryControl.UI.Helpers"
                    xmlns:customControls="clr-namespace:SmartSolutions.InventoryControl.UI.CustomControls"
                    xmlns:ControlExtension="clr-namespace:SmartSolutions.InventoryControl.UI.Helpers.ControlExtensions"
                    xmlns:converter="clr-namespace:SmartSolutions.InventoryControl.UI.Converters"
                    xmlns:local="clr-namespace:SmartSolutions.InventoryControl.UI.Resources.Styles">
    
    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="Resources\Colors.xaml"/>-->
        <!--<ResourceDictionary Source="Resources\FontSize.xaml"/>-->
        <!--<ResourceDictionary Source="Resources\Styles\Text.xaml"/>-->
    </ResourceDictionary.MergedDictionaries>
    <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter"/>
    <SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />
    <Style x:Key="TextBlockBaseStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="BaseStyle">
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="FontSize" Value="{StaticResource NormalSize}" />
    </Style>
    <ControlTemplate x:Key="CustomContentButton" TargetType="Button">
        <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding ControlExtension:MiscControlExtensions.CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <ContentPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockBaseStyle}" />
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">

                <Setter Property="Opacity" TargetName="border" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="ContentButton" TargetType="Button">
        <Style.Resources>
            <Storyboard x:Key="OnClick">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="{x:Null}">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.2"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <QuinticEase EasingMode="EaseInOut"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="ButtonBase.Click">
                <BeginStoryboard>
                    <!-- "{StaticResource OnClick}"-->
                    <Storyboard>

                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="ClickMode" Value="Release"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FontSize" Value="{StaticResource NormalSize}" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ControlExtension:MiscControlExtensions.CornerRadius" Value="5"/>
        <!--<Setter Property="helpers:ControlHelper.CornerRadius" Value="5" />-->
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{StaticResource CustomContentButton}"/>
        <!--<Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding helpers:ControlHelper.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightGrayColor2Brush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>



    <!--ComboBox Toggle Button-->
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ControlExtension:MiscControlExtensions.CornerRadius" Value="5" />
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource BlueColorBrush}"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Release"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding ControlExtension:MiscControlExtensions.CornerRadius}">
                        <Border x:Name="splitBorder" Width="35" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="0" BorderBrush="Transparent">
                            <Path x:Name="arrow" Width="15" Stretch="Uniform" VerticalAlignment="Center" Margin="0" Opacity="0.8" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CustomContentToggleButton" TargetType="ToggleButton">
        <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding helpers:ControlHelper.CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Opacity" Value="0.5" />-->
                <Setter Property="Opacity" TargetName="border" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CustomContentToggleButtonStyle"  TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="helpers:ControlHelper.CornerRadius" Value="5" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="FontSize" Value="{StaticResource NormalSize}" />
        <Setter Property="Template" Value="{StaticResource CustomContentToggleButton}"/>
    </Style>

    <Style x:Key="ButtonLikeRadioStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderBrush" Value="#F2F2F2" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource GrayColorBrush}"/>
        <Setter Property="ControlExtension:MiscControlExtensions.UncheckedColor" Value="{StaticResource OrangeColorBrush}"/>
        <Setter Property="ControlExtension:MiscControlExtensions.UncheckedForeground" Value="{StaticResource GrayColorBrush}"/>
        <Setter Property="ControlExtension:MiscControlExtensions.CornerRadius" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="{StaticResource NormalSize}" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding ControlExtension:MiscControlExtensions.CornerRadius}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="contentpresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockBaseStyle}">
                                    <!--<Setter Property="TextAlignment" Value="Center" />-->
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{Binding (ControlExtension:MiscControlExtensions.UncheckedColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="contentpresenter" Property="TextBlock.Foreground" Value="{Binding (ControlExtension:MiscControlExtensions.UncheckedForeground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <!--<Setter TargetName="border" Property="Background" Value="#F2F2F2" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonLikeRadioStyleTransparent" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderBrush" Value="#F2F2F2" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ControlExtension:MiscControlExtensions.CornerRadius" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="{StaticResource NormalSize}" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding ControlExtension:MiscControlExtensions.CornerRadius}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockBaseStyle}">
                                    <!--<Setter Property="TextAlignment" Value="Center" />-->
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <!--<Setter TargetName="border" Property="Background" Value="#F2F2F2" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Icon button -->
    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource BlueColorBrush}" />
        <Setter Property="Foreground" Value="{StaticResource PureWhiteColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource HeadingSize}" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}" />
        <Setter Property="Padding" Value="30" />
        <Setter Property="Margin" Value="0" />

        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}" 
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource LightBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource TransparentBlueColor}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource GrayColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="IconGrowButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ContentButton}"  >
        <Setter Property="Background" Value="{StaticResource BlueColorBrush}" />
        <Setter Property="Foreground" Value="{StaticResource LightGrayColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource HeadingSize}" />
        <Setter Property="FontFamily" Value="{StaticResource MediumFont}"/>
        <Setter Property="Padding" Value="30" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">

                        <!-- Add a render scale transform -->
                        <Border.RenderTransform>
                            <ScaleTransform />
                        </Border.RenderTransform>
                        <Border.RenderTransformOrigin>
                            <Point X="0.5" Y="0.5" />
                        </Border.RenderTransformOrigin>
                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}" 
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource GrayColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SwitchToggleButton" TargetType="ToggleButton">
        <Setter Property="IsChecked" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Name="tBlock" Text="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                               FontSize="{StaticResource NormalSize}" FontFamily="{StaticResource MediumFont}"/>

                        <Border x:Name="ButtonBorder" 
                                Width="70"
                                CornerRadius="15" 
                                BorderThickness="0"
                                VerticalAlignment="Center" 
                                Margin="25 0 0 0">

                            <Ellipse Name="ellipse" 
                                     Height="29" 
                                     Width="29" 
                                     Fill="{StaticResource PureWhiteColorBrush}" 
                                     HorizontalAlignment="Right" 
                                     Margin="1"/>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="HorizontalAlignment" Value="Left" TargetName="ellipse"/>
                            <Setter Property="Background" Value="{StaticResource GreenColorBrush}" TargetName="ButtonBorder"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" Value="{StaticResource LightGrayColorBrush}" TargetName="ButtonBorder"/>
                            <Setter Property="HorizontalAlignment" Value="Left" TargetName="tBlock"/>
                            <Setter Property="VerticalAlignment" Value="Center" TargetName="tBlock"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderCircular" TargetType="Border">
        <Setter Property="ControlExtension:BorderExtensions.Circular" Value="True" />
    </Style>
    <Style x:Key="BorderCircularClip" BasedOn="{StaticResource BorderCircular}" TargetType="Border">
        <Setter Property="Clip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource BorderCircularClipConverter}">
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="BadgeDotTemplate" TargetType="customControls:NotificationButton">
        <customControls:SimplePanel>
            <ContentPresenter />
            <Border Visibility="{TemplateBinding ShowBadge,Converter={StaticResource BooleanToVisibilityConverter}}" Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </customControls:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="NotificationButtonTextTemplate" TargetType="customControls:NotificationButton">
        <customControls:SimplePanel>
            <ContentPresenter />
            <Border x:Name="Border" Visibility="{TemplateBinding ShowBadge,Converter={StaticResource BooleanToVisibilityConverter}}" RenderTransformOrigin="0.5 0.5" Style="{StaticResource BorderCircular}" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Border.RenderTransform>
                    <ScaleTransform />
                </Border.RenderTransform>
                <ContentPresenter ContentSource="Text" Margin="{TemplateBinding Padding}"/>
            </Border>
        </customControls:SimplePanel>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="customControls:NotificationButton.ValueChanged">
                <BeginStoryboard>
                    <Storyboard AutoReverse="True">
                        <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
                        <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="NotificationButtonProcessingTemplate" TargetType="customControls:NotificationButton">
        <customControls:SimplePanel>
            <ContentPresenter />
            <Ellipse Visibility="{TemplateBinding ShowBadge,Converter={StaticResource BooleanToVisibilityConverter}}" Height="10" Width="10" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5 0.5" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Ellipse.OpacityMask>
                    <RadialGradientBrush>
                        <GradientStop Offset="0" Color="Transparent" />
                        <GradientStop Offset="1" Color="Black" />
                    </RadialGradientBrush>
                </Ellipse.OpacityMask>
                <Ellipse.RenderTransform>
                    <ScaleTransform />
                </Ellipse.RenderTransform>
                <Ellipse.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever" DesiredFrameRate="20">
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="0" Duration="0:0:1" From="1" To="0" EasingFunction="{StaticResource SineEaseOut}" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Ellipse.Triggers>
            </Ellipse>
            <Border Visibility="{TemplateBinding ShowBadge,Converter={StaticResource BooleanToVisibilityConverter}}" Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </customControls:SimplePanel>
    </ControlTemplate>
    <Style x:Key="NotificationButtonBaseStyle" TargetType="customControls:NotificationButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionColorBrush}" />
        <Setter Property="Foreground" Value="{StaticResource PureWhiteColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource  PureWhiteColorBrush}" />
        <Setter Property="Padding" Value="6,2" />
        <Setter Property="Template" Value="{StaticResource NotificationButtonTextTemplate}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="BadgeMargin" Value="0,-10,-10,0" />
        <Style.Triggers>
            <Trigger Property="Status" Value="Dot">
                <Setter Property="Template" Value="{StaticResource BadgeDotTemplate}" />
                <!--<Setter Property="BorderBrush" Value="{StaticResource BorderColorBrush}" />-->
                <Setter Property="BadgeMargin" Value="0,-5,-5,0" />
            </Trigger>
            <Trigger Property="Status" Value="Processing">
                <Setter Property="Template" Value="{StaticResource NotificationButtonProcessingTemplate}" />
                <!--<Setter Property="BorderBrush" Value="{StaticResource BorderColorBrush}" />-->
                <Setter Property="BadgeMargin" Value="0,-5,-5,0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Foreground" Value="{StaticResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="BadgePrimary" BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Background" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="BadgeSuccess" BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Background" Value="{StaticResource GreenColorBrush}" />
    </Style>
    <Style x:Key="BadgeInfo" BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Background" Value="{StaticResource BlueColorBrush}" />
    </Style>
    <Style x:Key="BadgeWarning" BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Background" Value="{StaticResource YellowColorBrush}" />
    </Style>
    <Style x:Key="BadgeDanger" BasedOn="{StaticResource NotificationButtonBaseStyle}" TargetType="customControls:NotificationButton">
        <Setter Property="Background" Value="{StaticResource RedColorBrush}" />
    </Style>
</ResourceDictionary>